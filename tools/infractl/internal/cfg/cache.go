package cfg

import (
	"fmt"
	"path/filepath"

	"github.com/Excoriate/terragrunt-ref-arch-v2/tools/infractl/pkg/utils"
	"github.com/google/uuid"
)

// CreateCacheDir creates the infrastructure cache directory
// CreateCacheDir creates and ensures the existence of the infrastructure cache directory.
//
// This function performs the following steps:
// 1. Retrieves the absolute path for the infrastructure cache directory
// 2. Creates the directory if it does not already exist
//
// Returns:
//   - The absolute path to the created cache directory
//   - An error if either retrieving the path or creating the directory fails
//
// The function uses an idempotent directory creation method, which means:
// - If the directory already exists, no error is raised
// - If the directory needs to be created, it will be created with appropriate permissions
func CreateCacheDir() (string, error) {
	cacheDirPath, err := GetInfraCacheDirPathAbsolute()
	if err != nil {
		return "", fmt.Errorf("failed to get the infrastructure cache directory path: %w", err)
	}

	if err := utils.CreateDirIdempotent(cacheDirPath); err != nil {
		return "", fmt.Errorf("failed to create cache directory: %w", err)
	}

	return cacheDirPath, nil
}

// CreateCachedFilenameWithAutogeneratedID generates a unique cache filename for a specific target environment.
//
// This function creates a cache filename with a standardized naming convention that includes:
// - A prefix indicating it's a compiled configuration file
// - The target environment name
// - A randomly generated UUID to ensure uniqueness
//
// Parameters:
//   - targetEnv: The name or identifier of the target environment for which the cache is being created
//
// Returns:
//   - A string containing the generated cache filename (e.g., "config-compiled-production-<uuid>.json")
//   - An error if UUID generation fails
//
// The generated filename follows the pattern: config-compiled-<target-env>-<uuid>.json
// This ensures:
// - Unique filenames for each cache entry
// - Clear identification of the environment and purpose
// - Prevents filename collisions
func CreateFileInInfraCacheDir(filename, filecontent string) (string, error) {
	cacheDir, err := GetInfraCacheDirPathAbsolute()

	if err != nil {
		return "", fmt.Errorf("failed to get the infrastructure cache directory path: %w", err)
	}

	destinationFilePath := filepath.Join(cacheDir, filename)
	fileCreatedInCacheDir, fileCreatedErr := utils.CreateFileWithContentIdempotent(destinationFilePath, filecontent)

	if fileCreatedErr != nil {
		return "", fmt.Errorf("failed to create file in cache directory: %w", fileCreatedErr)
	}

	return fileCreatedInCacheDir, nil
}

// GenerateUniqueEnvConfigFilename creates a unique cache filename for a specific target environment.
//
// This function generates a unique filename for a configuration cache file by:
// 1. Generating a random UUID
// 2. Constructing a filename with a standardized format
//
// Parameters:
//   - targetEnv: The name or identifier of the target environment
//
// Returns:
//   - A string containing the generated unique cache filename
//   - An error if UUID generation fails
//
// The generated filename follows the pattern: config-compiled-<target-env>-<uuid>.json
// This ensures:
// - Unique filenames for each cache entry
// - Clear identification of the environment and purpose
// - Prevents filename collisions
func GenerateUniqueEnvConfigFilename(targetEnv string) (string, error) {
	uuid, err := uuid.NewRandom()

	if err != nil {
		return "", fmt.Errorf("failed to generate UUID for cache filename %s: %w", targetEnv, err)
	}

	// Filename convention is config-compiled-<target-env>-<uuid>.json
	cacheFilename := fmt.Sprintf("config-compiled-%s-%s.json", targetEnv, uuid.String())

	return cacheFilename, nil
}
